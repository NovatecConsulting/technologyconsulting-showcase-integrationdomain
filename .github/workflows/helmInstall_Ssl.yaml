name: helmInstall

on:
  workflow_dispatch:

env:
  containerimagetag: ${GITHUB_SHA}
  containerregistry: nttcshowcase.azurecr.io
  containerimagerepository: technologyconsulting-showcase-integrationdomain
  containerregistrysericeconnection: acr-sc

jobs:
  build_Stage_helm_deploy:
    runs-on: ubuntu-latest
    name: Helm install
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get secrets
        env:
          ARM_CLIENT_ID: ${{ secrets.TC_SHOWCASE_ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TC_SHOWCASE_ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TC_SHOWCASE_ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TC_SHOWCASE_ARM_TENANT_ID }}
        working-directory: ./helperscripts
        run: |
          chmod +x ./getKeyVaultSecrets.sh
          ./getKeyVaultSecrets.sh

      - name: Get Kubeconfig
        env:
          ARM_CLIENT_ID: ${{ secrets.TC_SHOWCASE_ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TC_SHOWCASE_ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TC_SHOWCASE_ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TC_SHOWCASE_ARM_TENANT_ID }}
          AKSRESOURCEGROUP: 'tc-showcase-test'
          AKSNAME: 'k8s-tc-showcase-test'
        working-directory: ./helperscripts
        run: |
          chmod +x ./getKubeconfig.sh
          ./getKubeconfig.sh

      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Uninstall old releases
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.TC_SHOWCASE_ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TC_SHOWCASE_ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TC_SHOWCASE_ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TC_SHOWCASE_ARM_TENANT_ID }}
          AKSRESOURCEGROUP: 'tc-showcase-test'
          AKSNAME: 'k8s-tc-showcase-test'
          IMAGETAG: ${{ env.SHORT_SHA }}
          STAGE: 'dev'
        run: |
          docker run \
            -v "$(pwd)/charts":/apps \
            -v "$(pwd)/helperscripts/kubeconfig":/root/.kube \
            alpine/helm \
              uninstall confluent-platform \
              --namespace "${STAGE}"
          docker run \
            -v "$(pwd)/charts":/apps \
            -v "$(pwd)/helperscripts/kubeconfig":/root/.kube \
            alpine/helm \
              uninstall connect-config \
              --namespace "${STAGE}"

      - name: Deploy Confluent Platform via Helm
        env:
          ARM_CLIENT_ID: ${{ secrets.TC_SHOWCASE_ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TC_SHOWCASE_ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TC_SHOWCASE_ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TC_SHOWCASE_ARM_TENANT_ID }}
          AKSRESOURCEGROUP: 'tc-showcase-test'
          AKSNAME: 'k8s-tc-showcase-test'
          IMAGETAG: ${{ env.SHORT_SHA }}
          STAGE: 'dev'
          BOOTSTRAP_SERVERS: ${{ env.CONFLUENT_CLOUD_BOOTSTRAP_SERVERS }}
          CONFLUENT_CLOUD_KEY: ${{ env.CONFLUENT_CLOUD_KEY }}
          CONFLUENT_CLOUD_SECRET: ${{ env.CONFLUENT_CLOUD_SECRET }}
          KAFKA_CONNECT_REST_API: "confluent-platform-cp-kafka-connect:8083"
          SCHEMA_REGISTRY_URL: "http://confluent-platform-cp-schema-registry:8081"
        run: |
          docker run \
            -v "$(pwd)":/apps \
            -v "$(pwd)/helperscripts/kubeconfig":/root/.kube \
            alpine/helm \
                upgrade confluent-platform ./charts/confluent-platform \
                  --namespace "${STAGE}" \
                  --install \
                  --values connect.values.yaml \
                  --set "cp-kafka-connect.configurationOverrides.config\.providers\.azure\.param\.azure\.client\.id=${ARM_CLIENT_ID}" \
                  --set "cp-kafka-connect.configurationOverrides.config\.providers\.azure\.param\.azure\.secret\.id=${ARM_CLIENT_SECRET}" \
                  --set "cp-kafka-connect.configurationOverrides.config\.providers\.azure\.param\.azure\.tenant\.id=${ARM_TENANT_ID}" \
                  --set cp-kafka-connect.image="novatec/tc-integrationdomain-kafka-connect" \
                  --set cp-kafka-connect.imageTag=${{ env.SHORT_SHA }} \
                  --set "cp-kafka-connect.configurationOverrides.bootstrap\.servers=${BOOTSTRAP_SERVERS}" \
                  --set "cp-kafka-connect.configurationOverrides.value\.converter\.schema\.registry\.url=${SCHEMA_REGISTRY_URL}" \
                  --set "cp-kafka-connect.configurationOverrides.key\.converter\.schema\.registry\.url=${SCHEMA_REGISTRY_URL}" \
                  --set "cp-kafka-connect.configurationOverrides.sasl\.jaas\.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='${CONFLUENT_CLOUD_KEY}' password='${CONFLUENT_CLOUD_SECRET}';" \
                  --set "cp-kafka-connect.configurationOverrides.consumer\.sasl\.jaas\.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='${CONFLUENT_CLOUD_KEY}' password='${CONFLUENT_CLOUD_SECRET}';" \
                  --set "cp-kafka-connect.configurationOverrides.producer\.sasl\.jaas\.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='${CONFLUENT_CLOUD_KEY}' password='${CONFLUENT_CLOUD_SECRET}';" \
                  --set "cp-kafka-connect.configurationOverrides.ssl\.endpoint\.identification\.algorithm=https" \
                  --set "cp-kafka-connect.configurationOverrides.sasl\.mechanism=PLAIN" \
                  --set "cp-kafka-connect.configurationOverrides.security\.protocol=SASL_SSL" \
                  --set "cp-kafka-connect.configurationOverrides.consumer\.ssl\.endpoint\.identification\.algorithm=https" \
                  --set "cp-kafka-connect.configurationOverrides.consumer\.sasl\.mechanism=PLAIN" \
                  --set "cp-kafka-connect.configurationOverrides.consumer\.security\.protocol=SASL_SSL" \
                  --set "cp-kafka-connect.configurationOverrides.producer\.ssl\.endpoint\.identification\.algorithm=https" \
                  --set "cp-kafka-connect.configurationOverrides.producer\.sasl\.mechanism=PLAIN" \
                  --set "cp-kafka-connect.configurationOverrides.producer\.security\.protocol=SASL_SSL" \
                  --values kafka.values.yaml \
                  --values sr.values.yaml \
                  --values zookeeper.values.yaml

      - name: Deploy Connector Config via Helm
        env:
          ARM_CLIENT_ID: ${{ secrets.TC_SHOWCASE_ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TC_SHOWCASE_ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TC_SHOWCASE_ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TC_SHOWCASE_ARM_TENANT_ID }}
          AKSRESOURCEGROUP: 'tc-showcase-test'
          AKSNAME: 'k8s-tc-showcase-test'
          IMAGETAG: ${{ env.SHORT_SHA }}
          STAGE: 'dev'
          BOOTSTRAP_SERVERS: ${{ env.CONFLUENT_CLOUD_BOOTSTRAP_SERVERS }}
          KAFKA_CONNECT_REST_API: "confluent-platform-cp-kafka-connect:8083"
        run: |
          docker run \
            -v "$(pwd)":/apps \
            -v "$(pwd)/helperscripts/kubeconfig":/root/.kube \
            alpine/helm \
                upgrade connect-config ./charts/connector-deploy \
                  --namespace "${STAGE}" \
                  --install \
                  --set kafkaConnectRestApi=${KAFKA_CONNECT_REST_API} \
                  --set kafkaBootstrapServer=${BOOTSTRAP_SERVERS} \
                  --set image="novatec/tc-integrationdomain-connector-deploy:${{ env.SHORT_SHA }}"
